/** \page cppclassinheritcomp Inheritance & Composition
\tableofcontents

* **Inheritance creates an is-a relationship between classes, while composition creates a has-a relationship**. In other words, inheritance says, "I am this class with these other things," while composition says "This other class is one of my components."

\section cppclasscomp Composition
Composition is the term used for placing an object within a class. Say there are two classes, A and B. If you place an object of type A into the declaration of B, that is composition.
~~~
//A struct or a class will work here, both are user-defined datatypes.
class A {
private:
    int someValue;
    int someOtherValue;
public:
    A();
    A(int a, int b);
    int getSomeValue();
    int setSomeValue(int val);
    int getSomeOtherValue();
    int setSomeOtherValue(int val);
};

class B {
private:
    int x[10];
public:
    B();
    A member; //This is composition, placing one user-defined type within another.
};
~~~

You can access values in `A` from an object of `B` using the dot operator.

    B obj; //When the constructor for B is run, it invokes the constructor for A automatically.
    obj.member.setSomeValue(7);
    ...

\note Although this particular example is useless, there are still times where composition is necessary and useful.

\section cppclassinherit Inheritance
As was said above, inheritance creates an "is-a" relationship between classes.

Inheritance introduces the need for a new encapsulation level: `protected`. When a member is `private`, it is not accessible to a class that inherits it. Members that are labeled `protected` are accessible by derived classes, but not for general use. In other words, `protected` members are accessible to methods declared within the derived class, but not when the class is instantiated and used.

\subsection cppclassinherituml UML Diagrams
When you are developing an application that uses inheritance, you usually start with a **Universal Modeling Language (UML)** diagram. A UML diagram shows the relationship between classes within a program. In other words, it shows what classes are components (composition) or others and when classes inherit others.

The UML syntax is slightly different from that of C++ due to the fact that it is designed to describe multiple programming languages.

\note I used [Dia](http://dia-installer.de/index.html.en) to create the diagrams in this section. It is fairly self-explanatory, but the terminology is slightly different. Notably, member variables are called "attributes" and methods are called "operations".

Here is a sample class in UML.

\diafile ExampleClass.dia

###Explanation:
- Encapsulation levels are denoted with `+`, `-`, or `#`
    - `+`: public
    - `-`: private
    - `#`: protected
- Member variables follow a `name: type = value` syntax. The `type` and `= value` parts are optional.
- Composition is denoted with a diamond pointing at the component type declaration. In this case, it is the Point struct.
- Member variables are in the top section, and methods are in the bottom. In Dia, you can choose to hide either, as I did in the struct.
- Methods follow a different syntax: `method(arg1:type, arg2:type = value): ReturnType`
    - Parameters are optional, and are formatted like members
    - The return type is shown after the name and parameters
- As you will see below, classes that inherit another class are shown with an arrow pointing to the class they inherit

\diafile ShapeClass.dia "The UML inheritance diagram showing the relation between the Shape class and its various decedents and components."
*/
