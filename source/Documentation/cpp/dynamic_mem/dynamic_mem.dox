/** \page cppmemdynamic Dynamic Memory
\tableofcontents

At some point, arrays become too big to store on the stack. This is called stack overflow.

~~~
#include <iostream>
using namespace std;

void overflow(double x);

int main() {
    overflow(0);
}

//For demonstration purposes, this function uses recusion.
void overflow(double x) {
    int a[1000][500];
    cout << x << '\n';
    overflow(x + 1);
}
~~~

###Output

    0
    1
    2
    3
    Segmentation fault (core dumped)

\note A recursive function is a function that calls itself in order to reduce the complexity of a problem. They can take up a lot of stack space as every function call is placed on the stack. The video below explains recursion fairly well.
\htmlonly
<iframe width="560" height="315" src="http://www.youtube.com/embed/Mv9NEXX1VHc" frameborder="0" allowfullscreen></iframe>
\endhtmlonly

\section cppmemnew The new Operator
In order to dynamically allocate a value, you have to use the `new` operator -- it dynamically allocates a block of memory and then returns a pointer to that location.

~~~
int* x = new int;
*x = 73;
cout << &x << ' ' << *x << '\n';
~~~

###Output

    0x7fff82376378 73

\warning Every `new` operation must have a corresponding `delete`. Read about that in the next section.

\section cppmemdel The delete Operator
The `delete` operator de-allocates memory.

~~~
#include <iostream>
using namespace std;

int main() {
    int* x = new int;
    *x = 38;
    cout << *x << '\n';
    delete x;
    cout << *x << '\n';
}
~~~

###Output

    38
    0

There is one problem in the above code. Look at the output, the second value is 0. However, this could easily be something else. `delete` de-allocates the memory so that it can be overwritten by the operating system. It is always best to assign the pointer to some other location of `NULL`.

~~~
#include <iostream>
using namespace std;

int main() {
    int* x = new int;
    *x = 38;
    cout << *x << '\n';
    delete x;
    cout << *x << '\n';
    x = NULL;
    cout << *x << '\n';
}
~~~

###Output

    38
    0
    Segmentation fault (core dumped)

\note The segmentation fault is good in this case -- it allows for easier debugging.

\warning `delete` is necessary when working with dynamic memory. Failure to do so will a **memory leak**. A memory leak occurs when a pointer pointing to dynamic memory is changed or inaccessible. For instance, a function that does not use the delete operator on an internal pointer. You can no longer access that value, and the system cannot take it back. This can cause problems if your program uses a large amount of memory.

\section cppmemarralloc Array Allocation
Arrays can be allocated easily. Just use the `new` and `delete` operators.

~~~
int* x = new int[10000]; //Allocates
delete [] x;             //De-allocates
~~~

You can access the elements of the array using the standard array subscript notation.

    x[103] = 32;

-------------------------------------------------

Large arrays are not the only benefit of dynamic arrays. The size of stack-allocated arrays has to be determined at compile-time. Dynamic arrays have their size determined at runtime.

~~~
#include <iostream>
using namespace std;

int main() {
    int s;
    cin >> s;
    int x[s];
    for (int i = 0; i < s; ++i)
        x[i] = i;
    for (int i = 0; i < s; ++i)
        cout << x[i] << '\n';
}
~~~

The above code should give a compiler error. Stack-allocated memory is allocated at compile-time, while dynamically allocated memory sends a message to the operating system saying that the program would like more memory. In most situations, the operating system accepts, but there is a speed penalty.

~~~
#include <iostream>
using namespace std;

int main() {
    int* x;
    unsigned int x_size;
    cout << "Enter the array size: ";
    cin >> x_size;
    x = new int[x_size];
    for (unsigned int i = 0; i < x_size; ++i)
    {
        cout << "Input x[" << i << "]: ";
        cin >> x[i];
    }
    cout << '\n';
    for (unsigned int i = 0; i < x_size; ++i)
        cout << "x[" << i << "] = " << x[i] << '\n';
    delete [] x;
    x = NULL;
}
~~~

###Input/Output

    Enter the array size: 8
    Input x[0]: 431
    Input x[1]: 541
    Input x[2]: 63
    Input x[3]: 1
    Input x[4]: 34
    Input x[5]: 63524
    Input x[6]: 1543155
    Input x[7]: 6513

    x[0] = 431
    x[1] = 541
    x[2] = 63
    x[3] = 1
    x[4] = 34
    x[5] = 63524
    x[6] = 1543155
    x[7] = 6513

-------------------------------------------------

Allocating a multidimensional array is more complex. You have to loop through each additional level and use pointers to pointers.
~~~
#include <iostream>
using namespace std;

int main() {
    int** x = new int*[100]; //Allocate array of pointers to pointers
    for (int i = 0; i < 100; ++i)
        x[i] = new int[1000]; //Allocate array of pointers
    x[10][300] = 30;
    cout << x[10][300] << '\n';
    for (int i = 0; i < 100; ++i)
        delete [] x[i]; //De-allocate array of pointers
    delete [] x; //De-allocate array of pointers to pointers
}
~~~

It is important to realize that allocating a multi-dimensional array to the heap is significantly different from the stack. Instead of the allocation in the \ref cppmdarray "multidimensional arrays" section, heap-allocated memory can be wherever the system finds free space. This results in a speed reduction.

Instead of a table like this...

<table>
<tr>
    <th colspan="2">x[3][2] in Memory</th>
</tr>
<tr>
    <th>Address</th>
    <th>Name</th>
</tr>
<tr>
    <td>1000</td>
    <td rowspan="4">x[0][0]</td>
</tr>
<tr>
    <td>1001</td>
</tr>
<tr>
    <td>1002</td>
</tr>
<tr>
    <td>1003</td>
</tr>
<tr>
    <td>1004</td>
    <td rowspan="4">x[0][1]</td>
</tr>
<tr>
    <td>1005</td>
</tr>
<tr>
    <td>1006</td>
</tr>
<tr>
    <td>1007</td>
</tr>
<tr>
    <td>1008</td>
    <td rowspan="4">x[1][0]</td>
</tr>
<tr>
    <td>1009</td>
</tr>
<tr>
    <td>1010</td>
</tr>
<tr>
    <td>1011</td>

</tr>
<tr>
    <td>1012</td>
    <td rowspan="4">x[1][1]</td>
</tr>
<tr>
    <td>1013</td>
</tr>
<tr>
    <td>1014</td>

</tr>
<tr>
    <td>1015</td>

</tr>
<tr>
    <td>1016</td>
    <td rowspan="4">x[2][0]</td>
</tr>
<tr>
    <td>1017</td>
</tr>
<tr>
    <td>1018</td>

</tr>
<tr>
    <td>1019</td>
</tr>
<tr>
    <td>1020</td>
    <td rowspan="4">x[2][1]</td>
</tr>
<tr>
    <td>1021</td>
</tr>
<tr>
    <td>1022</td>
</tr>
<tr>
    <td>1023</td>
</tr>
</table>

A dynamically allocated array with the same dimensions  would look more like this...

<img src="dynamicmdarray.svg" style="width:40%;">

\section cppmemobj Dynamic Objects
Objects can be dynamically allocated as well. Here, we will cover two situations: classes containing pointers and dynamically-allocated classes.

\subsection cppmemobjcwp Pointers as Members
Classes containing pointers typically allocate memory in the constructor and de-allocate using the **destructor**. Let's create a dummy class to demonstrate this.

###FILE: Dummy.hh
~~~
#ifndef DUMMY_HH
#define DUMMY_HH
#include <iostream>

class Dummy {
private:
    static const int s;
    int* a;
public:
    Dummy();  //The constructor
    ~Dummy(); //The destructor
    bool setElement(int i, int v);
    int getElement(int i);
};

#endif
~~~

###FILE: Dummy.cc
~~~
#include "Dummy.hh"
using namespace std;

const int Dummy::s = 1000000;

Dummy::Dummy() {
    cout << "Dummy constructor run.\n";
    a = new int[s];
}

Dummy::~Dummy() {
    cout << "Dummy destructor run.\n";
    delete [] a;
}

bool Dummy::setElement(int i, int v) {
    if (i >= s)
        return false;
    a[i] = v;
    return true;
}

int Dummy::getElement(int i) {
    return a[i];
}
~~~

###FILE: test.cc
~~~
#include <iostream>
#include "Dummy.hh"
using namespace std;

int main() {
    Dummy test;
    test.setElement(1000, 43125);
    test.setElement(13, 15);
}
~~~

###Output

    Dummy constructor run.
    Dummy destructor run.

\subsection cppmemdynclass Dynamic Objects
Every time you create a class, you actually create two data types: the class datatype and the class pointer datatype. In other words, you create `DummyClass` and `DummyClass*`. **When using a pointer to a class,** `new` **calls the constructor and** `delete` **calls the destructor.** The files below demonstrate how class pointers work.

###FILE: Dummy.hh
~~~
#ifndef DUMMY_HH
#define DUMMY_HH
#include <iostream>

class Dummy {
private:
    int a[100];
public:
    Dummy();  //The constructor
    ~Dummy(); //The destructor
    void setElement(int i, int v);
    int getElement(int i);
};

#endif
~~~

###FILE: Dummy.cc
~~~
#include "Dummy.hh"
using namespace std;

Dummy::Dummy() {
    for (int i = 0; i < 100; ++i)
    {
        a[i] = 0;
    }
    cout << "Dummy constructor run.\n";
}

Dummy::~Dummy() {
    cout << "Dummy destructor run.\n";
}

void Dummy::setElement(int i, int v) {
    a[i] = v;
}

int Dummy::getElement(int i) {
    return a[i];
}
~~~

###FILE: test.cc
~~~
#include <iostream>
#include "Dummy.hh"
using namespace std;

int main() {
    Dummy* test = new Dummy;
    test->setElement(10, 43125);
    test->setElement(13, 15);
    delete test;
    test = NULL;
}
~~~

Although the above class is basically useless, it does demonstrate how class pointers work. There are certain situations where a particular class stores a lot of information but you need a very large number of them. This is the kind of situation where it could be useful to store an array of class pointers or a dynamically allocated array of class pointers.

\note Again, you have to use the `->` operator as opposed to the dot operator.

Further Research
================
Dynamic memory has many practical uses. I would encourage you to research data structures, as they use dynamic memory to organize large amounts of data efficiently.
*/
