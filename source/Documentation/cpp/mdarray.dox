/** \page cppmdarray Multidimensional Arrays
\tableofcontents

Multidimensional arrays allow you to create arrays with more than one index. This can be useful for creating tables or simulating real life within your program.

\section cppmdarrayalloc Memory Allocation Diagrams
Memory allocation refers to how and where variables and other temporary values are stored while the program is running. There are two types of memory (RAM) storage: **the stack** and **the heap**. For now, we will just focus on the stack - the portion of memory that the system dedicates to your program.

Given this code...

    char c;
    int x;
    int y[5];

Here is a memory chart...

Start Address | End Address | Unit Size | Name
--------------|-------------|-----------|------
10000         | 10001       | 1 byte    | c
10001         | 10005       | 4 bytes   | x
10005         | 10024       | 4 bytes   | y

\note An int takes 4 bytes of memory. 1 byte is 4 bits, a bit is a single 1 or 0.

The above table is fairly similar to the one that the system keeps, but not exactly the same. The array takes 5x the memory of the int. Because that is not immediately visible, memory is often shown in diagrams or charts. For instance, a chart of the above memory could look like this...	

<table>
<tr>
    <th>Address</th>
    <th>Name</th>
    <th>Type</th>
</tr>
<tr>
    <td>10000</td>
    <td>c</td>
    <td>char</td>
</tr>
<tr>
    <td>10001</td>
    <td rowspan="4">x</td>
    <td rowspan="4">int</td>
</tr>
<tr>
    <td>10002</td>
</tr>
<tr>
    <td>10003</td>
</tr>
<tr>
    <td>10004</td>
</tr>
<tr>
    <td>10005</td>
    <td rowspan="4">y[0]</td>
    <td rowspan="20">int[5]</td>
</tr>
<tr>
    <td>10006</td>
</tr>
<tr>
    <td>10007</td>
</tr>
<tr>
    <td>10008</td>
</tr>
<tr>
    <td>10009</td>
    <td rowspan="4">y[1]</td>
</tr>
<tr>
    <td>10010</td>
</tr>
<tr>
    <td>10011</td>
</tr>
<tr>
    <td>10012</td>
</tr>
<tr>
    <td>10013</td>
    <td rowspan="4">y[2]</td>
</tr>
<tr>
    <td>10014</td>
</tr>
<tr>
    <td>10015</td>
</tr>
<tr>
    <td>10016</td>
</tr>
<tr>
    <td>10017</td>
    <td rowspan="4">y[3]</td>
</tr>
<tr>
    <td>10018</td>
</tr>
<tr>
    <td>10019</td>
</tr>
<tr>
    <td>10020</td>
</tr>
<tr>
    <td>10021</td>
    <td rowspan="4">y[4]</td>
</tr>
<tr>
    <td>10022</td>
</tr>
<tr>
    <td>10023</td>
</tr>
<tr>
    <td>10024</td>
</tr>
<tr>
    <td colspan="3">...</td>
</tr>
</table>

\note The addresses do not matter, I am just giving each byte an address. This is a simplification of reality, but it works for illustrative purposes.

The benefit of the above chart is that it *shows* how much space is taken up by each variable.

\section cppmdarray2 Arrays of Arrays
Multidimensional arrays allow you to store arrays of arrays. For instance, a declaration of a 2 dimensional array would look like this...

    int x[3][2];

The array above has two indexes, and is known as a 3x2 array. You can store 6 values in it. To access a value, you treat it like a normal array.

    x[0][0] = 0;
    x[2][1] = 3;
    
One way to think of a 2D array is as a table. It would look something like the one below...

<table>
<tr>
    <th colspan="2">x[3][2]</th>
</tr>
<tr>
    <td>x[0][0]</td>
    <td>x[0][1]</td>
</tr>
<tr>
    <td>x[1][0]</td>
    <td>x[1][1]</td>
</tr>
<tr>
    <td>x[2][0]</td>
    <td>x[2][1]</td>
</tr>
</table>

It is important to note that the table is arranged so that the first index defines the number of rows and the second columns. This is different from what you commonly learn in math class, where you use X and Y coordinates (columns/rows instead of rows/columns). The reason for using the rows/columns (RC) convention is that, to the compiler, you are defining an array of arrays. In other words, memory is not 2D.

<table>
<tr>
    <th colspan="2">x[3][2] in Memory</th>
</tr>
<tr>
    <th>Address</th>
    <th>Name</th>
</tr>
<tr>
    <td>1000</td>
    <td rowspan="4">x[0][0]</td>
</tr>
<tr>
    <td>1001</td>
</tr>
<tr>
    <td>1002</td>
</tr>
<tr>
    <td>1003</td>
</tr>
<tr>
    <td>1004</td>
    <td rowspan="4">x[0][1]</td>
</tr>
<tr>
    <td>1005</td>
</tr>
<tr>
    <td>1006</td>
</tr>
<tr>
    <td>1007</td>
</tr>
<tr>
    <td>1008</td>
    <td rowspan="4">x[1][0]</td>
</tr>
<tr>
    <td>1009</td>
</tr>
<tr>
    <td>1010</td>
</tr>
<tr>
    <td>1011</td>

</tr>
<tr>
    <td>1012</td>
    <td rowspan="4">x[1][1]</td>
</tr>
<tr>
    <td>1013</td>
</tr>
<tr>
    <td>1014</td>

</tr>
<tr>
    <td>1015</td>

</tr>
<tr>
    <td>1016</td>
    <td rowspan="4">x[2][0]</td>
</tr>
<tr>
    <td>1017</td>
</tr>
<tr>
    <td>1018</td>

</tr>
<tr>
    <td>1019</td>
</tr>
<tr>
    <td>1020</td>
    <td rowspan="4">x[2][1]</td>
</tr>
<tr>
    <td>1021</td>
</tr>
<tr>
    <td>1022</td>
</tr>
<tr>
    <td>1023</td>
</tr>
</table>

The same concept applies to arrays of 3 or more dimensions. I won't show a table of these, as they would take up too much space.

    int a[4][5][6]; //A 4x5x6 3-dimensional array (120 places)
    float b[5][6][7][8]; //A 5x6x7x8 array (1680 places)

\note In general, it is best to declare the fastest changing (largest) index last.

More information is available in [this Wikipedia article](http://en.wikipedia.org/wiki/Row-major_order).

\section cppmdarrayiter Initializing
Initializing the values of a multidimensional array is slightly more complicated than single-dimensional ones.

    int a[3][4] = {{1, 2, 3, 4},
                   {5, 6, 7, 8},
                   {9, 10, 11, 12}};

Each row is enclosed in its own pair of braces, and the whole statement is also enclosed. Again, note that the x coordinates (columns) are the second dimension.

\note Putting a single value such as `{1}` does not work for multidimensional arrays, the easiest way to initialize the values is via a loop.

You can also let the compiler define the first dimension. The code below is valid.

    int a[][4] = {{1, 2, 3, 4},
                  {5, 6, 7, 8},
                  {9, 10, 11, 12}};

However, this does not work.

    int a[][] = {{1, 2, 3, 4},
                 {5, 6, 7, 8},
                 {9, 10, 11, 12}};

* **You have to define every dimension except for the first.**

\warning Declaring an array greater than 2 dimensions in this manner is not advised. It can become easily confusing.
*/
