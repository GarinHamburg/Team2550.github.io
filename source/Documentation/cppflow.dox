/**
\page cppflow Program Flow

Programming would be almost useless if it were simply a list of actions to perform. This is where flow control comes in. Using flow control, you can allow your program to make decisions.

\section logicgates Boolean Logic
One useful capability of almost any programming language is the ability to take multiple tests and put them into a single boolean (true/false) result. This is done through logic gates.

###C++ Logic Gate Operators
Operation | Symbol
----------|--------
OR        | \|\|  |
AND       | &&
NOT       | !

An OR statement takes two values as input and, if either value is true, the or statement will be true. Note that "either" also includes both values as shown in the truth table below. An OR operation uses short-circuit evaluation, meaning that the computer will not run any more comparisons then necessary. For instance, if the first value in the OR statement is TRUE, then the output will be TRUE regardless of the second operand - the computer will skip the second comparison if it can.

\note 
A truth table is a simple table which shows the behavior of a logic gate by showing the output for every possible value of inputs (in order to show the behavior in any situation, you only need two inputs).
> 1 = TRUE\n
> 0 = FALSE

An AND statement is only true if all of the inputs are true. Short-circuit evaluation is not possible when using the AND operator.

The NOT operator returns the opposite of the actual result of an evaluation so that TRUE = FALSE and FALSE = TRUE. This can be very useful, as you can put the "!" operator in front of any logical statement. For instance, !(2 > 3) will return FALSE.

###Truth Tables
 A | B | A \|\| B | A && B
:-:|:-:|:--------:|:-------:
 0 | 0 | 0        | 0
 0 | 1 | 1        | 0
 1 | 0 | 1        | 0
 1 | 1 | 1        | 1

\note It is very important that you remember to type in "||" for "OR" and "&&" for "AND" - putting a single | or & character will use the logic gate in bitwise mode, which will mess up the results.

###NOT Truth Table
INPUT | !INPUT
:----:|:------:
 0    | 1
 1    | 0


\subsection logicorder Order of Operations
When evaluating an expression, C++ has a defined order of operations for logic gates. The complete order of operations for expression evaluation in C++ is as follows...

1. Parenthesis
2. Multiplication and division from left to right
3. Addition and subtraction from left to right
4. Comparison operations (inequalities), includes <, <=, >, >=
5. Comparison operations (equalities), includes ==, !=
6. Logical AND "&&"
7. Logical OR "||"

A more complete table can be found at [cppreference.com](http://en.cppreference.com/w/cpp/language/operator_precedence)

* **Even though C++ has a set order of operations, adding parenthesis often makes it easier to understand.** The table below demonstrates this.
<table>
    <tr>
        <th>Expression</th>
        <th>Result</th>
	<th>Reason</th>
    </tr>
    <tr>
        <td>1 == 2 && 1 < 2 || 1-1 > -5</td>
        <td>TRUE</td>
	<td>Remember that the OR operator is evaluated last. The AND statement evaluates to FALSE, but the other side is TRUE, yielding a result of TRUE. This is the same as writing...
> (1 == 2 && 1 < 2) || (1-1 > -5)
	</td>
    </tr>
    <tr>
        <td>true && true || false && true</td>
        <td>TRUE</td>
	<td>True because the expression to the right of the || is true. The values "true" and "false" are valid in C++ and correspond to 1 (true) and 0 (false).</td>
    </tr>
    <tr>
        <td>!(false || false) && true</td>
        <td>FALSE</td>
	<td>True because the opposite of false is true (the ! is outside the parenthesis).</td>
    </tr>
    <tr>
        <td>!((false && true) || (false))</td>
        <td>TRUE</td>
	<td>Everything is inside parenthesis, with a ! outside. The opposite of false is true.</td>
    </tr>
    <tr>
        <td>!(1<2)</td>
        <td>FALSE</td>
	<td>The opposite of true is false.</td>
    </tr>
</table>

\section cppif If Statements
Up until now, any code written here runs and then exits, it does not have abilitiy to make decisions. The if statement changes that...

	if (condition_is_met)
	{
		//do stuff
	}
	//continue the program

The condition can be any logical expression or comparison.

\subsection cppelse else
You can also add an "else" statement that runs if the condition is not met...

	if (condition_is_met)
		//do action
	else
		//do action
	//You don't need to add in curly brackets {} if only one line of code is being run after the if or else statement.

\subsection cppelif else if
These are great for simple tests, but what if you want to check multiple conditions and run different actions based on those? The answer is the "else if" statement...

	if (condition)
	{
		//do stuff
		//do something else
	}
	else if (another_condition)
		//do something not done before
	else if (yet_another_condition)
	{
		//do something
		//and another thing
		//and another
	}
	//you can add as many else if statements as you want
	else
		//do this if none of the above conditions are met

\subsection cppswitch switch
The switch statement is a shorthand version of the if... else if... else statement. However, it does have a handicap.
~~~{.cc}
switch (variable) {
case value:
	//do something
	//value can be any valid type
	break; //break statements are important, they keep other 
		//things from executing after you have met a condition
case another_value:
	//do something else
	break;
case yet_another_value:
	//do another thing
	break;
case value:
case value:
case value:
	//the above 3 conditions all execute here, this is the equivalent of an OR statement
	break;
default:
	//this is the equivalent of an else statement the default section is optional
	break;
// You may have noticed that I said "value" instead of "condition" after each case. This is the limitation of a switch statement. You cannot run a full logical test.
}
~~~

A switch statement is simply shorthand for some else-if statements. In fact, you can attain the same behavior in an else-if statement.
~~~{.cc}
if (variable == value)
	//do 1 action
else if (variable == value)
	//do another action
else if (variable == value)
	//do yet another action
else if (variable == value || variable == value || variable == value)
{
	//do an action
	//do another action
	//the test here is the same as the 3 blank "case value" lines
	//	in the switch
}
else
	//again optional, this is the "default" code
~~~

##Example
The following code is a real-life(ish) example of when you would use an if statement... It also demonstrates nesting (putting one if statement inside another). You can copy and paste this code into your IDE and it will run...
~~~{.cc}
//Determines if a char is in the alphabet, if it is lower or uppercase, and whether it is a vowel

#include <iostream>
//this line includes a part of the standard C++ library, allowing you
//	to output data to the screen and input it through the keyboard

using namespace std;

int main() {
	char UsrInput;
	cout << "Please enter an ASCII character: ";//part of iostream
	cin >> UsrInput;//another part of iostream
	cout << endl;

	if ((UsrInput >= 'A' && UsrInput <= 'Z') ||
			(UsrInput >= 'a' && UsrInput <= 'z'))//this line continues the if statement
			//The code here could be done with a switch, but it is far easier and more efficient to use logic gates
	{
		cout << "The character you entered is a letter." << endl;
		if (UsrInput >= 'A' && UsrInput <= 'Z')
			cout << "The letter you entered is a UPPERCASE."
				<< endl;
		//remember that the statement above and below here are actually 2 lines
		else cout << "The letter you entered is lowercase." << endl;
		switch (UsrInput)
		{ 
			//a switch is easier to type and less cluttered here because you only have to name the variable once;
			//if you were working with multiple variables, you would need an if... else if... else statement.
			case 'A':
			case 'a':
			case 'E':
			case 'e':
			case 'I':
			case 'i':
			case 'O':
			case 'o':
			case 'U':
			case 'u':
				cout << "The letter you entered is a vowel."
					<< endl;
				break;
			default:
				cout << "The letter you entered is NOT a vowel." << endl;
				break;
		}
	}
	else cout << "The character you entered is NOT a letter.";
	//C++ ignores most whitespace, so it is completely valid to put code on the same line as an else or if statement.
}
~~~
*/
